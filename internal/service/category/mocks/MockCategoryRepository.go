// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function with given fields: ctx, _a1
func (_m *MockCategoryRepository) CreateCategory(ctx context.Context, _a1 *entities.Category) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Category) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryRepository_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type MockCategoryRepository_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.Category
func (_e *MockCategoryRepository_Expecter) CreateCategory(ctx interface{}, _a1 interface{}) *MockCategoryRepository_CreateCategory_Call {
	return &MockCategoryRepository_CreateCategory_Call{Call: _e.mock.On("CreateCategory", ctx, _a1)}
}

func (_c *MockCategoryRepository_CreateCategory_Call) Run(run func(ctx context.Context, _a1 *entities.Category)) *MockCategoryRepository_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Category))
	})
	return _c
}

func (_c *MockCategoryRepository_CreateCategory_Call) Return(_a0 error) *MockCategoryRepository_CreateCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepository_CreateCategory_Call) RunAndReturn(run func(context.Context, *entities.Category) error) *MockCategoryRepository_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: ctx, id
func (_m *MockCategoryRepository) DeleteCategory(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryRepository_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type MockCategoryRepository_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockCategoryRepository_Expecter) DeleteCategory(ctx interface{}, id interface{}) *MockCategoryRepository_DeleteCategory_Call {
	return &MockCategoryRepository_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", ctx, id)}
}

func (_c *MockCategoryRepository_DeleteCategory_Call) Run(run func(ctx context.Context, id int64)) *MockCategoryRepository_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCategoryRepository_DeleteCategory_Call) Return(_a0 error) *MockCategoryRepository_DeleteCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepository_DeleteCategory_Call) RunAndReturn(run func(context.Context, int64) error) *MockCategoryRepository_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCategories provides a mock function with given fields: ctx
func (_m *MockCategoryRepository) GetAllCategories(ctx context.Context) ([]*entities.CategoryWithCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCategories")
	}

	var r0 []*entities.CategoryWithCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.CategoryWithCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.CategoryWithCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.CategoryWithCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepository_GetAllCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCategories'
type MockCategoryRepository_GetAllCategories_Call struct {
	*mock.Call
}

// GetAllCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoryRepository_Expecter) GetAllCategories(ctx interface{}) *MockCategoryRepository_GetAllCategories_Call {
	return &MockCategoryRepository_GetAllCategories_Call{Call: _e.mock.On("GetAllCategories", ctx)}
}

func (_c *MockCategoryRepository_GetAllCategories_Call) Run(run func(ctx context.Context)) *MockCategoryRepository_GetAllCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCategoryRepository_GetAllCategories_Call) Return(_a0 []*entities.CategoryWithCount, _a1 error) *MockCategoryRepository_GetAllCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepository_GetAllCategories_Call) RunAndReturn(run func(context.Context) ([]*entities.CategoryWithCount, error)) *MockCategoryRepository_GetAllCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoryByID provides a mock function with given fields: ctx, id
func (_m *MockCategoryRepository) GetCategoryByID(ctx context.Context, id int64) (*entities.CategoryWithCount, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoryByID")
	}

	var r0 *entities.CategoryWithCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.CategoryWithCount, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.CategoryWithCount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.CategoryWithCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepository_GetCategoryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoryByID'
type MockCategoryRepository_GetCategoryByID_Call struct {
	*mock.Call
}

// GetCategoryByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockCategoryRepository_Expecter) GetCategoryByID(ctx interface{}, id interface{}) *MockCategoryRepository_GetCategoryByID_Call {
	return &MockCategoryRepository_GetCategoryByID_Call{Call: _e.mock.On("GetCategoryByID", ctx, id)}
}

func (_c *MockCategoryRepository_GetCategoryByID_Call) Run(run func(ctx context.Context, id int64)) *MockCategoryRepository_GetCategoryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCategoryRepository_GetCategoryByID_Call) Return(_a0 *entities.CategoryWithCount, _a1 error) *MockCategoryRepository_GetCategoryByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepository_GetCategoryByID_Call) RunAndReturn(run func(context.Context, int64) (*entities.CategoryWithCount, error)) *MockCategoryRepository_GetCategoryByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: ctx, _a1
func (_m *MockCategoryRepository) UpdateCategory(ctx context.Context, _a1 *entities.Category) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Category) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryRepository_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type MockCategoryRepository_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.Category
func (_e *MockCategoryRepository_Expecter) UpdateCategory(ctx interface{}, _a1 interface{}) *MockCategoryRepository_UpdateCategory_Call {
	return &MockCategoryRepository_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", ctx, _a1)}
}

func (_c *MockCategoryRepository_UpdateCategory_Call) Run(run func(ctx context.Context, _a1 *entities.Category)) *MockCategoryRepository_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Category))
	})
	return _c
}

func (_c *MockCategoryRepository_UpdateCategory_Call) Return(_a0 error) *MockCategoryRepository_UpdateCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepository_UpdateCategory_Call) RunAndReturn(run func(context.Context, *entities.Category) error) *MockCategoryRepository_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
