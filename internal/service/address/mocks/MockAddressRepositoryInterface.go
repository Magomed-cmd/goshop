// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockAddressRepositoryInterface is an autogenerated mock type for the AddressRepositoryInterface type
type MockAddressRepositoryInterface struct {
	mock.Mock
}

type MockAddressRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressRepositoryInterface) EXPECT() *MockAddressRepositoryInterface_Expecter {
	return &MockAddressRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateAddress provides a mock function with given fields: ctx, _a1
func (_m *MockAddressRepositoryInterface) CreateAddress(ctx context.Context, _a1 *entities.UserAddress) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserAddress) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressRepositoryInterface_CreateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAddress'
type MockAddressRepositoryInterface_CreateAddress_Call struct {
	*mock.Call
}

// CreateAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.UserAddress
func (_e *MockAddressRepositoryInterface_Expecter) CreateAddress(ctx interface{}, _a1 interface{}) *MockAddressRepositoryInterface_CreateAddress_Call {
	return &MockAddressRepositoryInterface_CreateAddress_Call{Call: _e.mock.On("CreateAddress", ctx, _a1)}
}

func (_c *MockAddressRepositoryInterface_CreateAddress_Call) Run(run func(ctx context.Context, _a1 *entities.UserAddress)) *MockAddressRepositoryInterface_CreateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.UserAddress))
	})
	return _c
}

func (_c *MockAddressRepositoryInterface_CreateAddress_Call) Return(_a0 error) *MockAddressRepositoryInterface_CreateAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressRepositoryInterface_CreateAddress_Call) RunAndReturn(run func(context.Context, *entities.UserAddress) error) *MockAddressRepositoryInterface_CreateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAddress provides a mock function with given fields: ctx, addressID
func (_m *MockAddressRepositoryInterface) DeleteAddress(ctx context.Context, addressID int64) error {
	ret := _m.Called(ctx, addressID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressRepositoryInterface_DeleteAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAddress'
type MockAddressRepositoryInterface_DeleteAddress_Call struct {
	*mock.Call
}

// DeleteAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addressID int64
func (_e *MockAddressRepositoryInterface_Expecter) DeleteAddress(ctx interface{}, addressID interface{}) *MockAddressRepositoryInterface_DeleteAddress_Call {
	return &MockAddressRepositoryInterface_DeleteAddress_Call{Call: _e.mock.On("DeleteAddress", ctx, addressID)}
}

func (_c *MockAddressRepositoryInterface_DeleteAddress_Call) Run(run func(ctx context.Context, addressID int64)) *MockAddressRepositoryInterface_DeleteAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAddressRepositoryInterface_DeleteAddress_Call) Return(_a0 error) *MockAddressRepositoryInterface_DeleteAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressRepositoryInterface_DeleteAddress_Call) RunAndReturn(run func(context.Context, int64) error) *MockAddressRepositoryInterface_DeleteAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressByID provides a mock function with given fields: ctx, addressID
func (_m *MockAddressRepositoryInterface) GetAddressByID(ctx context.Context, addressID int64) (*entities.UserAddress, error) {
	ret := _m.Called(ctx, addressID)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressByID")
	}

	var r0 *entities.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.UserAddress, error)); ok {
		return rf(ctx, addressID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.UserAddress); ok {
		r0 = rf(ctx, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepositoryInterface_GetAddressByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressByID'
type MockAddressRepositoryInterface_GetAddressByID_Call struct {
	*mock.Call
}

// GetAddressByID is a helper method to define mock.On call
//   - ctx context.Context
//   - addressID int64
func (_e *MockAddressRepositoryInterface_Expecter) GetAddressByID(ctx interface{}, addressID interface{}) *MockAddressRepositoryInterface_GetAddressByID_Call {
	return &MockAddressRepositoryInterface_GetAddressByID_Call{Call: _e.mock.On("GetAddressByID", ctx, addressID)}
}

func (_c *MockAddressRepositoryInterface_GetAddressByID_Call) Run(run func(ctx context.Context, addressID int64)) *MockAddressRepositoryInterface_GetAddressByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAddressRepositoryInterface_GetAddressByID_Call) Return(_a0 *entities.UserAddress, _a1 error) *MockAddressRepositoryInterface_GetAddressByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepositoryInterface_GetAddressByID_Call) RunAndReturn(run func(context.Context, int64) (*entities.UserAddress, error)) *MockAddressRepositoryInterface_GetAddressByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAddresses provides a mock function with given fields: ctx, userID
func (_m *MockAddressRepositoryInterface) GetUserAddresses(ctx context.Context, userID int64) ([]*entities.UserAddress, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAddresses")
	}

	var r0 []*entities.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entities.UserAddress, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entities.UserAddress); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.UserAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepositoryInterface_GetUserAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAddresses'
type MockAddressRepositoryInterface_GetUserAddresses_Call struct {
	*mock.Call
}

// GetUserAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockAddressRepositoryInterface_Expecter) GetUserAddresses(ctx interface{}, userID interface{}) *MockAddressRepositoryInterface_GetUserAddresses_Call {
	return &MockAddressRepositoryInterface_GetUserAddresses_Call{Call: _e.mock.On("GetUserAddresses", ctx, userID)}
}

func (_c *MockAddressRepositoryInterface_GetUserAddresses_Call) Run(run func(ctx context.Context, userID int64)) *MockAddressRepositoryInterface_GetUserAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAddressRepositoryInterface_GetUserAddresses_Call) Return(_a0 []*entities.UserAddress, _a1 error) *MockAddressRepositoryInterface_GetUserAddresses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepositoryInterface_GetUserAddresses_Call) RunAndReturn(run func(context.Context, int64) ([]*entities.UserAddress, error)) *MockAddressRepositoryInterface_GetUserAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAddress provides a mock function with given fields: ctx, _a1
func (_m *MockAddressRepositoryInterface) UpdateAddress(ctx context.Context, _a1 *entities.UserAddress) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserAddress) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddressRepositoryInterface_UpdateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAddress'
type MockAddressRepositoryInterface_UpdateAddress_Call struct {
	*mock.Call
}

// UpdateAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.UserAddress
func (_e *MockAddressRepositoryInterface_Expecter) UpdateAddress(ctx interface{}, _a1 interface{}) *MockAddressRepositoryInterface_UpdateAddress_Call {
	return &MockAddressRepositoryInterface_UpdateAddress_Call{Call: _e.mock.On("UpdateAddress", ctx, _a1)}
}

func (_c *MockAddressRepositoryInterface_UpdateAddress_Call) Run(run func(ctx context.Context, _a1 *entities.UserAddress)) *MockAddressRepositoryInterface_UpdateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.UserAddress))
	})
	return _c
}

func (_c *MockAddressRepositoryInterface_UpdateAddress_Call) Return(_a0 error) *MockAddressRepositoryInterface_UpdateAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddressRepositoryInterface_UpdateAddress_Call) RunAndReturn(run func(context.Context, *entities.UserAddress) error) *MockAddressRepositoryInterface_UpdateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddressRepositoryInterface creates a new instance of MockAddressRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressRepositoryInterface {
	mock := &MockAddressRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
