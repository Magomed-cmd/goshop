// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *MockUserRepository) CreateUser(ctx context.Context, _a1 *entities.User) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.User
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, _a1 interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, _a1)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, _a1 *entities.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, *entities.User) error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserRepository_GetUserByEmail_Call {
	return &MockUserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) Return(_a0 *entities.User, _a1 error) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) GetUserByID(ctx context.Context, id int64) (*entities.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUserRepository_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockUserRepository_GetUserByID_Call {
	return &MockUserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockUserRepository_GetUserByID_Call) Run(run func(ctx context.Context, id int64)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) Return(_a0 *entities.User, _a1 error) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) RunAndReturn(run func(context.Context, int64) (*entities.User, error)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserProfile provides a mock function with given fields: ctx, userID, name, phone
func (_m *MockUserRepository) UpdateUserProfile(ctx context.Context, userID int64, name *string, phone *string) error {
	ret := _m.Called(ctx, userID, name, phone)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *string, *string) error); ok {
		r0 = rf(ctx, userID, name, phone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_UpdateUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserProfile'
type MockUserRepository_UpdateUserProfile_Call struct {
	*mock.Call
}

// UpdateUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - name *string
//   - phone *string
func (_e *MockUserRepository_Expecter) UpdateUserProfile(ctx interface{}, userID interface{}, name interface{}, phone interface{}) *MockUserRepository_UpdateUserProfile_Call {
	return &MockUserRepository_UpdateUserProfile_Call{Call: _e.mock.On("UpdateUserProfile", ctx, userID, name, phone)}
}

func (_c *MockUserRepository_UpdateUserProfile_Call) Run(run func(ctx context.Context, userID int64, name *string, phone *string)) *MockUserRepository_UpdateUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserProfile_Call) Return(_a0 error) *MockUserRepository_UpdateUserProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_UpdateUserProfile_Call) RunAndReturn(run func(context.Context, int64, *string, *string) error) *MockUserRepository_UpdateUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
