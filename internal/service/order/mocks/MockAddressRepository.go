// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockAddressRepository is an autogenerated mock type for the AddressRepository type
type MockAddressRepository struct {
	mock.Mock
}

type MockAddressRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressRepository) EXPECT() *MockAddressRepository_Expecter {
	return &MockAddressRepository_Expecter{mock: &_m.Mock}
}

// GetAddressByID provides a mock function with given fields: ctx, addressID
func (_m *MockAddressRepository) GetAddressByID(ctx context.Context, addressID int64) (*entities.UserAddress, error) {
	ret := _m.Called(ctx, addressID)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressByID")
	}

	var r0 *entities.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.UserAddress, error)); ok {
		return rf(ctx, addressID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.UserAddress); ok {
		r0 = rf(ctx, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_GetAddressByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressByID'
type MockAddressRepository_GetAddressByID_Call struct {
	*mock.Call
}

// GetAddressByID is a helper method to define mock.On call
//   - ctx context.Context
//   - addressID int64
func (_e *MockAddressRepository_Expecter) GetAddressByID(ctx interface{}, addressID interface{}) *MockAddressRepository_GetAddressByID_Call {
	return &MockAddressRepository_GetAddressByID_Call{Call: _e.mock.On("GetAddressByID", ctx, addressID)}
}

func (_c *MockAddressRepository_GetAddressByID_Call) Run(run func(ctx context.Context, addressID int64)) *MockAddressRepository_GetAddressByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAddressRepository_GetAddressByID_Call) Return(_a0 *entities.UserAddress, _a1 error) *MockAddressRepository_GetAddressByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_GetAddressByID_Call) RunAndReturn(run func(context.Context, int64) (*entities.UserAddress, error)) *MockAddressRepository_GetAddressByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddressRepository creates a new instance of MockAddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddressRepository {
	mock := &MockAddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
