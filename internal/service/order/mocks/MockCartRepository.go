// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockCartRepository is an autogenerated mock type for the CartRepository type
type MockCartRepository struct {
	mock.Mock
}

type MockCartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartRepository) EXPECT() *MockCartRepository_Expecter {
	return &MockCartRepository_Expecter{mock: &_m.Mock}
}

// ClearCart provides a mock function with given fields: ctx, cartID
func (_m *MockCartRepository) ClearCart(ctx context.Context, cartID int64) error {
	ret := _m.Called(ctx, cartID)

	if len(ret) == 0 {
		panic("no return value specified for ClearCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartRepository_ClearCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearCart'
type MockCartRepository_ClearCart_Call struct {
	*mock.Call
}

// ClearCart is a helper method to define mock.On call
//   - ctx context.Context
//   - cartID int64
func (_e *MockCartRepository_Expecter) ClearCart(ctx interface{}, cartID interface{}) *MockCartRepository_ClearCart_Call {
	return &MockCartRepository_ClearCart_Call{Call: _e.mock.On("ClearCart", ctx, cartID)}
}

func (_c *MockCartRepository_ClearCart_Call) Run(run func(ctx context.Context, cartID int64)) *MockCartRepository_ClearCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCartRepository_ClearCart_Call) Return(_a0 error) *MockCartRepository_ClearCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepository_ClearCart_Call) RunAndReturn(run func(context.Context, int64) error) *MockCartRepository_ClearCart_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCart provides a mock function with given fields: ctx, userID
func (_m *MockCartRepository) GetUserCart(ctx context.Context, userID int64) (*entities.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCart")
	}

	var r0 *entities.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCartRepository_GetUserCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCart'
type MockCartRepository_GetUserCart_Call struct {
	*mock.Call
}

// GetUserCart is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockCartRepository_Expecter) GetUserCart(ctx interface{}, userID interface{}) *MockCartRepository_GetUserCart_Call {
	return &MockCartRepository_GetUserCart_Call{Call: _e.mock.On("GetUserCart", ctx, userID)}
}

func (_c *MockCartRepository_GetUserCart_Call) Run(run func(ctx context.Context, userID int64)) *MockCartRepository_GetUserCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCartRepository_GetUserCart_Call) Return(_a0 *entities.Cart, _a1 error) *MockCartRepository_GetUserCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCartRepository_GetUserCart_Call) RunAndReturn(run func(context.Context, int64) (*entities.Cart, error)) *MockCartRepository_GetUserCart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCartRepository creates a new instance of MockCartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartRepository {
	mock := &MockCartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
