// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	types "goshop/internal/domain/types"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, orderID
func (_m *MockOrderRepository) CancelOrder(ctx context.Context, orderID int) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepository_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type MockOrderRepository_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int
func (_e *MockOrderRepository_Expecter) CancelOrder(ctx interface{}, orderID interface{}) *MockOrderRepository_CancelOrder_Call {
	return &MockOrderRepository_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderID)}
}

func (_c *MockOrderRepository_CancelOrder_Call) Run(run func(ctx context.Context, orderID int)) *MockOrderRepository_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockOrderRepository_CancelOrder_Call) Return(_a0 error) *MockOrderRepository_CancelOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepository_CancelOrder_Call) RunAndReturn(run func(context.Context, int) error) *MockOrderRepository_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, _a1
func (_m *MockOrderRepository) CreateOrder(ctx context.Context, _a1 *entities.Order) (*int64, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Order) (*int64, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Order) *int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Order) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.Order
func (_e *MockOrderRepository_Expecter) CreateOrder(ctx interface{}, _a1 interface{}) *MockOrderRepository_CreateOrder_Call {
	return &MockOrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, _a1)}
}

func (_c *MockOrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, _a1 *entities.Order)) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Order))
	})
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) Return(_a0 *int64, _a1 error) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) RunAndReturn(run func(context.Context, *entities.Order) (*int64, error)) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByID provides a mock function with given fields: ctx, orderID
func (_m *MockOrderRepository) GetOrderByID(ctx context.Context, orderID int) (*entities.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_GetOrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByID'
type MockOrderRepository_GetOrderByID_Call struct {
	*mock.Call
}

// GetOrderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int
func (_e *MockOrderRepository_Expecter) GetOrderByID(ctx interface{}, orderID interface{}) *MockOrderRepository_GetOrderByID_Call {
	return &MockOrderRepository_GetOrderByID_Call{Call: _e.mock.On("GetOrderByID", ctx, orderID)}
}

func (_c *MockOrderRepository_GetOrderByID_Call) Run(run func(ctx context.Context, orderID int)) *MockOrderRepository_GetOrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockOrderRepository_GetOrderByID_Call) Return(_a0 *entities.Order, _a1 error) *MockOrderRepository_GetOrderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_GetOrderByID_Call) RunAndReturn(run func(context.Context, int) (*entities.Order, error)) *MockOrderRepository_GetOrderByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrders provides a mock function with given fields: ctx, userID, filters
func (_m *MockOrderRepository) GetUserOrders(ctx context.Context, userID int64, filters types.OrderFilters) ([]*entities.Order, int64, error) {
	ret := _m.Called(ctx, userID, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrders")
	}

	var r0 []*entities.Order
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.OrderFilters) ([]*entities.Order, int64, error)); ok {
		return rf(ctx, userID, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.OrderFilters) []*entities.Order); ok {
		r0 = rf(ctx, userID, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, types.OrderFilters) int64); ok {
		r1 = rf(ctx, userID, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, types.OrderFilters) error); ok {
		r2 = rf(ctx, userID, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOrderRepository_GetUserOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrders'
type MockOrderRepository_GetUserOrders_Call struct {
	*mock.Call
}

// GetUserOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - filters types.OrderFilters
func (_e *MockOrderRepository_Expecter) GetUserOrders(ctx interface{}, userID interface{}, filters interface{}) *MockOrderRepository_GetUserOrders_Call {
	return &MockOrderRepository_GetUserOrders_Call{Call: _e.mock.On("GetUserOrders", ctx, userID, filters)}
}

func (_c *MockOrderRepository_GetUserOrders_Call) Run(run func(ctx context.Context, userID int64, filters types.OrderFilters)) *MockOrderRepository_GetUserOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(types.OrderFilters))
	})
	return _c
}

func (_c *MockOrderRepository_GetUserOrders_Call) Return(_a0 []*entities.Order, _a1 int64, _a2 error) *MockOrderRepository_GetUserOrders_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOrderRepository_GetUserOrders_Call) RunAndReturn(run func(context.Context, int64, types.OrderFilters) ([]*entities.Order, int64, error)) *MockOrderRepository_GetUserOrders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function with given fields: ctx, orderID, status
func (_m *MockOrderRepository) UpdateOrderStatus(ctx context.Context, orderID int, status string) error {
	ret := _m.Called(ctx, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepository_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockOrderRepository_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int
//   - status string
func (_e *MockOrderRepository_Expecter) UpdateOrderStatus(ctx interface{}, orderID interface{}, status interface{}) *MockOrderRepository_UpdateOrderStatus_Call {
	return &MockOrderRepository_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", ctx, orderID, status)}
}

func (_c *MockOrderRepository_UpdateOrderStatus_Call) Run(run func(ctx context.Context, orderID int, status string)) *MockOrderRepository_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockOrderRepository_UpdateOrderStatus_Call) Return(_a0 error) *MockOrderRepository_UpdateOrderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepository_UpdateOrderStatus_Call) RunAndReturn(run func(context.Context, int, string) error) *MockOrderRepository_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
