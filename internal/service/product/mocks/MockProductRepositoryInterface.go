// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	types "goshop/internal/domain/types"
)

// MockProductRepositoryInterface is an autogenerated mock type for the ProductRepositoryInterface type
type MockProductRepositoryInterface struct {
	mock.Mock
}

type MockProductRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepositoryInterface) EXPECT() *MockProductRepositoryInterface_Expecter {
	return &MockProductRepositoryInterface_Expecter{mock: &_m.Mock}
}

// AddProductToCategories provides a mock function with given fields: ctx, productID, categoryIDs
func (_m *MockProductRepositoryInterface) AddProductToCategories(ctx context.Context, productID int64, categoryIDs []int64) error {
	ret := _m.Called(ctx, productID, categoryIDs)

	if len(ret) == 0 {
		panic("no return value specified for AddProductToCategories")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, productID, categoryIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepositoryInterface_AddProductToCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProductToCategories'
type MockProductRepositoryInterface_AddProductToCategories_Call struct {
	*mock.Call
}

// AddProductToCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int64
//   - categoryIDs []int64
func (_e *MockProductRepositoryInterface_Expecter) AddProductToCategories(ctx interface{}, productID interface{}, categoryIDs interface{}) *MockProductRepositoryInterface_AddProductToCategories_Call {
	return &MockProductRepositoryInterface_AddProductToCategories_Call{Call: _e.mock.On("AddProductToCategories", ctx, productID, categoryIDs)}
}

func (_c *MockProductRepositoryInterface_AddProductToCategories_Call) Run(run func(ctx context.Context, productID int64, categoryIDs []int64)) *MockProductRepositoryInterface_AddProductToCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_AddProductToCategories_Call) Return(_a0 error) *MockProductRepositoryInterface_AddProductToCategories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepositoryInterface_AddProductToCategories_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *MockProductRepositoryInterface_AddProductToCategories_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function with given fields: ctx, _a1
func (_m *MockProductRepositoryInterface) CreateProduct(ctx context.Context, _a1 *entities.Product) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Product) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepositoryInterface_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductRepositoryInterface_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.Product
func (_e *MockProductRepositoryInterface_Expecter) CreateProduct(ctx interface{}, _a1 interface{}) *MockProductRepositoryInterface_CreateProduct_Call {
	return &MockProductRepositoryInterface_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, _a1)}
}

func (_c *MockProductRepositoryInterface_CreateProduct_Call) Run(run func(ctx context.Context, _a1 *entities.Product)) *MockProductRepositoryInterface_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Product))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_CreateProduct_Call) Return(_a0 error) *MockProductRepositoryInterface_CreateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepositoryInterface_CreateProduct_Call) RunAndReturn(run func(context.Context, *entities.Product) error) *MockProductRepositoryInterface_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *MockProductRepositoryInterface) DeleteProduct(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepositoryInterface_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockProductRepositoryInterface_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductRepositoryInterface_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockProductRepositoryInterface_DeleteProduct_Call {
	return &MockProductRepositoryInterface_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockProductRepositoryInterface_DeleteProduct_Call) Run(run func(ctx context.Context, id int64)) *MockProductRepositoryInterface_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_DeleteProduct_Call) Return(_a0 error) *MockProductRepositoryInterface_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepositoryInterface_DeleteProduct_Call) RunAndReturn(run func(context.Context, int64) error) *MockProductRepositoryInterface_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *MockProductRepositoryInterface) GetProductByID(ctx context.Context, id int64) (*entities.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *entities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepositoryInterface_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockProductRepositoryInterface_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductRepositoryInterface_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockProductRepositoryInterface_GetProductByID_Call {
	return &MockProductRepositoryInterface_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockProductRepositoryInterface_GetProductByID_Call) Run(run func(ctx context.Context, id int64)) *MockProductRepositoryInterface_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_GetProductByID_Call) Return(_a0 *entities.Product, _a1 error) *MockProductRepositoryInterface_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepositoryInterface_GetProductByID_Call) RunAndReturn(run func(context.Context, int64) (*entities.Product, error)) *MockProductRepositoryInterface_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductCategories provides a mock function with given fields: ctx, productID
func (_m *MockProductRepositoryInterface) GetProductCategories(ctx context.Context, productID int64) ([]*entities.Category, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductCategories")
	}

	var r0 []*entities.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*entities.Category, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entities.Category); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepositoryInterface_GetProductCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductCategories'
type MockProductRepositoryInterface_GetProductCategories_Call struct {
	*mock.Call
}

// GetProductCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int64
func (_e *MockProductRepositoryInterface_Expecter) GetProductCategories(ctx interface{}, productID interface{}) *MockProductRepositoryInterface_GetProductCategories_Call {
	return &MockProductRepositoryInterface_GetProductCategories_Call{Call: _e.mock.On("GetProductCategories", ctx, productID)}
}

func (_c *MockProductRepositoryInterface_GetProductCategories_Call) Run(run func(ctx context.Context, productID int64)) *MockProductRepositoryInterface_GetProductCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_GetProductCategories_Call) Return(_a0 []*entities.Category, _a1 error) *MockProductRepositoryInterface_GetProductCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepositoryInterface_GetProductCategories_Call) RunAndReturn(run func(context.Context, int64) ([]*entities.Category, error)) *MockProductRepositoryInterface_GetProductCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function with given fields: ctx, filters
func (_m *MockProductRepositoryInterface) GetProducts(ctx context.Context, filters types.ProductFilters) ([]*entities.Product, int, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []*entities.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ProductFilters) ([]*entities.Product, int, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ProductFilters) []*entities.Product); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ProductFilters) int); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.ProductFilters) error); ok {
		r2 = rf(ctx, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProductRepositoryInterface_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type MockProductRepositoryInterface_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - filters types.ProductFilters
func (_e *MockProductRepositoryInterface_Expecter) GetProducts(ctx interface{}, filters interface{}) *MockProductRepositoryInterface_GetProducts_Call {
	return &MockProductRepositoryInterface_GetProducts_Call{Call: _e.mock.On("GetProducts", ctx, filters)}
}

func (_c *MockProductRepositoryInterface_GetProducts_Call) Run(run func(ctx context.Context, filters types.ProductFilters)) *MockProductRepositoryInterface_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ProductFilters))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_GetProducts_Call) Return(_a0 []*entities.Product, _a1 int, _a2 error) *MockProductRepositoryInterface_GetProducts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProductRepositoryInterface_GetProducts_Call) RunAndReturn(run func(context.Context, types.ProductFilters) ([]*entities.Product, int, error)) *MockProductRepositoryInterface_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProductFromCategories provides a mock function with given fields: ctx, productID
func (_m *MockProductRepositoryInterface) RemoveProductFromCategories(ctx context.Context, productID int64) error {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProductFromCategories")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepositoryInterface_RemoveProductFromCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProductFromCategories'
type MockProductRepositoryInterface_RemoveProductFromCategories_Call struct {
	*mock.Call
}

// RemoveProductFromCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int64
func (_e *MockProductRepositoryInterface_Expecter) RemoveProductFromCategories(ctx interface{}, productID interface{}) *MockProductRepositoryInterface_RemoveProductFromCategories_Call {
	return &MockProductRepositoryInterface_RemoveProductFromCategories_Call{Call: _e.mock.On("RemoveProductFromCategories", ctx, productID)}
}

func (_c *MockProductRepositoryInterface_RemoveProductFromCategories_Call) Run(run func(ctx context.Context, productID int64)) *MockProductRepositoryInterface_RemoveProductFromCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_RemoveProductFromCategories_Call) Return(_a0 error) *MockProductRepositoryInterface_RemoveProductFromCategories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepositoryInterface_RemoveProductFromCategories_Call) RunAndReturn(run func(context.Context, int64) error) *MockProductRepositoryInterface_RemoveProductFromCategories_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: ctx, _a1
func (_m *MockProductRepositoryInterface) UpdateProduct(ctx context.Context, _a1 *entities.Product) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Product) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepositoryInterface_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductRepositoryInterface_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *entities.Product
func (_e *MockProductRepositoryInterface_Expecter) UpdateProduct(ctx interface{}, _a1 interface{}) *MockProductRepositoryInterface_UpdateProduct_Call {
	return &MockProductRepositoryInterface_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, _a1)}
}

func (_c *MockProductRepositoryInterface_UpdateProduct_Call) Run(run func(ctx context.Context, _a1 *entities.Product)) *MockProductRepositoryInterface_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Product))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_UpdateProduct_Call) Return(_a0 error) *MockProductRepositoryInterface_UpdateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepositoryInterface_UpdateProduct_Call) RunAndReturn(run func(context.Context, *entities.Product) error) *MockProductRepositoryInterface_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductRepositoryInterface creates a new instance of MockProductRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepositoryInterface {
	mock := &MockProductRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
