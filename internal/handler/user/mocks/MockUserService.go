// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "goshop/internal/dto"

	entities "goshop/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetUserProfile provides a mock function with given fields: ctx, userID
func (_m *MockUserService) GetUserProfile(ctx context.Context, userID int64) (*dto.UserProfile, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 *dto.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*dto.UserProfile, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dto.UserProfile); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfile'
type MockUserService_GetUserProfile_Call struct {
	*mock.Call
}

// GetUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockUserService_Expecter) GetUserProfile(ctx interface{}, userID interface{}) *MockUserService_GetUserProfile_Call {
	return &MockUserService_GetUserProfile_Call{Call: _e.mock.On("GetUserProfile", ctx, userID)}
}

func (_c *MockUserService_GetUserProfile_Call) Run(run func(ctx context.Context, userID int64)) *MockUserService_GetUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserService_GetUserProfile_Call) Return(_a0 *dto.UserProfile, _a1 error) *MockUserService_GetUserProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserProfile_Call) RunAndReturn(run func(context.Context, int64) (*dto.UserProfile, error)) *MockUserService_GetUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, req
func (_m *MockUserService) Login(ctx context.Context, req *dto.LoginRequest) (*entities.User, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *entities.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.LoginRequest) (*entities.User, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.LoginRequest) *entities.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.LoginRequest) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.LoginRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.LoginRequest
func (_e *MockUserService_Expecter) Login(ctx interface{}, req interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, req *dto.LoginRequest)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.LoginRequest))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(_a0 *entities.User, _a1 string, _a2 error) *MockUserService_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(context.Context, *dto.LoginRequest) (*entities.User, string, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *MockUserService) Register(ctx context.Context, req *dto.RegisterRequest) (*entities.User, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *entities.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RegisterRequest) (*entities.User, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RegisterRequest) *entities.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RegisterRequest) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.RegisterRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.RegisterRequest
func (_e *MockUserService_Expecter) Register(ctx interface{}, req interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockUserService_Register_Call) Run(run func(ctx context.Context, req *dto.RegisterRequest)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.RegisterRequest))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(_a0 *entities.User, _a1 string, _a2 error) *MockUserService_Register_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(context.Context, *dto.RegisterRequest) (*entities.User, string, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, userID, req
func (_m *MockUserService) UpdateProfile(ctx context.Context, userID int64, req *dto.UpdateProfileRequest) error {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *dto.UpdateProfileRequest) error); ok {
		r0 = rf(ctx, userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockUserService_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - req *dto.UpdateProfileRequest
func (_e *MockUserService_Expecter) UpdateProfile(ctx interface{}, userID interface{}, req interface{}) *MockUserService_UpdateProfile_Call {
	return &MockUserService_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", ctx, userID, req)}
}

func (_c *MockUserService_UpdateProfile_Call) Run(run func(ctx context.Context, userID int64, req *dto.UpdateProfileRequest)) *MockUserService_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*dto.UpdateProfileRequest))
	})
	return _c
}

func (_c *MockUserService_UpdateProfile_Call) Return(_a0 error) *MockUserService_UpdateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_UpdateProfile_Call) RunAndReturn(run func(context.Context, int64, *dto.UpdateProfileRequest) error) *MockUserService_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
