// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "goshop/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockCartService is an autogenerated mock type for the CartService type
type MockCartService struct {
	mock.Mock
}

type MockCartService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartService) EXPECT() *MockCartService_Expecter {
	return &MockCartService_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function with given fields: ctx, userID, req
func (_m *MockCartService) AddItem(ctx context.Context, userID int64, req *dto.AddToCartRequest) error {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *dto.AddToCartRequest) error); ok {
		r0 = rf(ctx, userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartService_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type MockCartService_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - req *dto.AddToCartRequest
func (_e *MockCartService_Expecter) AddItem(ctx interface{}, userID interface{}, req interface{}) *MockCartService_AddItem_Call {
	return &MockCartService_AddItem_Call{Call: _e.mock.On("AddItem", ctx, userID, req)}
}

func (_c *MockCartService_AddItem_Call) Run(run func(ctx context.Context, userID int64, req *dto.AddToCartRequest)) *MockCartService_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*dto.AddToCartRequest))
	})
	return _c
}

func (_c *MockCartService_AddItem_Call) Return(_a0 error) *MockCartService_AddItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartService_AddItem_Call) RunAndReturn(run func(context.Context, int64, *dto.AddToCartRequest) error) *MockCartService_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// ClearCart provides a mock function with given fields: ctx, userID
func (_m *MockCartService) ClearCart(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ClearCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartService_ClearCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearCart'
type MockCartService_ClearCart_Call struct {
	*mock.Call
}

// ClearCart is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockCartService_Expecter) ClearCart(ctx interface{}, userID interface{}) *MockCartService_ClearCart_Call {
	return &MockCartService_ClearCart_Call{Call: _e.mock.On("ClearCart", ctx, userID)}
}

func (_c *MockCartService_ClearCart_Call) Run(run func(ctx context.Context, userID int64)) *MockCartService_ClearCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCartService_ClearCart_Call) Return(_a0 error) *MockCartService_ClearCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartService_ClearCart_Call) RunAndReturn(run func(context.Context, int64) error) *MockCartService_ClearCart_Call {
	_c.Call.Return(run)
	return _c
}

// GetCart provides a mock function with given fields: ctx, userID
func (_m *MockCartService) GetCart(ctx context.Context, userID int64) (*dto.CartResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCart")
	}

	var r0 *dto.CartResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*dto.CartResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dto.CartResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CartResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCartService_GetCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCart'
type MockCartService_GetCart_Call struct {
	*mock.Call
}

// GetCart is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockCartService_Expecter) GetCart(ctx interface{}, userID interface{}) *MockCartService_GetCart_Call {
	return &MockCartService_GetCart_Call{Call: _e.mock.On("GetCart", ctx, userID)}
}

func (_c *MockCartService_GetCart_Call) Run(run func(ctx context.Context, userID int64)) *MockCartService_GetCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCartService_GetCart_Call) Return(_a0 *dto.CartResponse, _a1 error) *MockCartService_GetCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCartService_GetCart_Call) RunAndReturn(run func(context.Context, int64) (*dto.CartResponse, error)) *MockCartService_GetCart_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveItem provides a mock function with given fields: ctx, userID, productID
func (_m *MockCartService) RemoveItem(ctx context.Context, userID int64, productID int64) error {
	ret := _m.Called(ctx, userID, productID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartService_RemoveItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveItem'
type MockCartService_RemoveItem_Call struct {
	*mock.Call
}

// RemoveItem is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - productID int64
func (_e *MockCartService_Expecter) RemoveItem(ctx interface{}, userID interface{}, productID interface{}) *MockCartService_RemoveItem_Call {
	return &MockCartService_RemoveItem_Call{Call: _e.mock.On("RemoveItem", ctx, userID, productID)}
}

func (_c *MockCartService_RemoveItem_Call) Run(run func(ctx context.Context, userID int64, productID int64)) *MockCartService_RemoveItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockCartService_RemoveItem_Call) Return(_a0 error) *MockCartService_RemoveItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartService_RemoveItem_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockCartService_RemoveItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItem provides a mock function with given fields: ctx, userID, productID, quantity
func (_m *MockCartService) UpdateItem(ctx context.Context, userID int64, productID int64, quantity int) error {
	ret := _m.Called(ctx, userID, productID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) error); ok {
		r0 = rf(ctx, userID, productID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartService_UpdateItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItem'
type MockCartService_UpdateItem_Call struct {
	*mock.Call
}

// UpdateItem is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - productID int64
//   - quantity int
func (_e *MockCartService_Expecter) UpdateItem(ctx interface{}, userID interface{}, productID interface{}, quantity interface{}) *MockCartService_UpdateItem_Call {
	return &MockCartService_UpdateItem_Call{Call: _e.mock.On("UpdateItem", ctx, userID, productID, quantity)}
}

func (_c *MockCartService_UpdateItem_Call) Run(run func(ctx context.Context, userID int64, productID int64, quantity int)) *MockCartService_UpdateItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *MockCartService_UpdateItem_Call) Return(_a0 error) *MockCartService_UpdateItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartService_UpdateItem_Call) RunAndReturn(run func(context.Context, int64, int64, int) error) *MockCartService_UpdateItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCartService creates a new instance of MockCartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartService {
	mock := &MockCartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
