// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "goshop/internal/dto"

	mock "github.com/stretchr/testify/mock"

	types "goshop/internal/domain/types"
)

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

type MockProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductService) EXPECT() *MockProductService_Expecter {
	return &MockProductService_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, req
func (_m *MockProductService) CreateProduct(ctx context.Context, req *dto.CreateProductRequest) (*dto.ProductResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *dto.ProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProductRequest) (*dto.ProductResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProductRequest) *dto.ProductResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateProductRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductService_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductService_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateProductRequest
func (_e *MockProductService_Expecter) CreateProduct(ctx interface{}, req interface{}) *MockProductService_CreateProduct_Call {
	return &MockProductService_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, req)}
}

func (_c *MockProductService_CreateProduct_Call) Run(run func(ctx context.Context, req *dto.CreateProductRequest)) *MockProductService_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateProductRequest))
	})
	return _c
}

func (_c *MockProductService_CreateProduct_Call) Return(_a0 *dto.ProductResponse, _a1 error) *MockProductService_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductService_CreateProduct_Call) RunAndReturn(run func(context.Context, *dto.CreateProductRequest) (*dto.ProductResponse, error)) *MockProductService_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *MockProductService) DeleteProduct(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductService_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockProductService_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductService_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockProductService_DeleteProduct_Call {
	return &MockProductService_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockProductService_DeleteProduct_Call) Run(run func(ctx context.Context, id int64)) *MockProductService_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductService_DeleteProduct_Call) Return(_a0 error) *MockProductService_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductService_DeleteProduct_Call) RunAndReturn(run func(context.Context, int64) error) *MockProductService_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *MockProductService) GetProductByID(ctx context.Context, id int64) (*dto.ProductResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *dto.ProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*dto.ProductResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dto.ProductResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductService_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockProductService_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductService_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockProductService_GetProductByID_Call {
	return &MockProductService_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockProductService_GetProductByID_Call) Run(run func(ctx context.Context, id int64)) *MockProductService_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductService_GetProductByID_Call) Return(_a0 *dto.ProductResponse, _a1 error) *MockProductService_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductService_GetProductByID_Call) RunAndReturn(run func(context.Context, int64) (*dto.ProductResponse, error)) *MockProductService_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function with given fields: ctx, filters
func (_m *MockProductService) GetProducts(ctx context.Context, filters types.ProductFilters) (*dto.ProductCatalogResponse, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 *dto.ProductCatalogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ProductFilters) (*dto.ProductCatalogResponse, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ProductFilters) *dto.ProductCatalogResponse); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductCatalogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ProductFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductService_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type MockProductService_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - filters types.ProductFilters
func (_e *MockProductService_Expecter) GetProducts(ctx interface{}, filters interface{}) *MockProductService_GetProducts_Call {
	return &MockProductService_GetProducts_Call{Call: _e.mock.On("GetProducts", ctx, filters)}
}

func (_c *MockProductService_GetProducts_Call) Run(run func(ctx context.Context, filters types.ProductFilters)) *MockProductService_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ProductFilters))
	})
	return _c
}

func (_c *MockProductService_GetProducts_Call) Return(_a0 *dto.ProductCatalogResponse, _a1 error) *MockProductService_GetProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductService_GetProducts_Call) RunAndReturn(run func(context.Context, types.ProductFilters) (*dto.ProductCatalogResponse, error)) *MockProductService_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: ctx, id, req
func (_m *MockProductService) UpdateProduct(ctx context.Context, id int64, req *dto.UpdateProductRequest) (*dto.ProductResponse, error) {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *dto.ProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *dto.UpdateProductRequest) (*dto.ProductResponse, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *dto.UpdateProductRequest) *dto.ProductResponse); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *dto.UpdateProductRequest) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - req *dto.UpdateProductRequest
func (_e *MockProductService_Expecter) UpdateProduct(ctx interface{}, id interface{}, req interface{}) *MockProductService_UpdateProduct_Call {
	return &MockProductService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, id, req)}
}

func (_c *MockProductService_UpdateProduct_Call) Run(run func(ctx context.Context, id int64, req *dto.UpdateProductRequest)) *MockProductService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*dto.UpdateProductRequest))
	})
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) Return(_a0 *dto.ProductResponse, _a1 error) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) RunAndReturn(run func(context.Context, int64, *dto.UpdateProductRequest) (*dto.ProductResponse, error)) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
